/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.neoris.websockets;

import com.neoris.websockets.filetransfer.JsonDecoder;
import com.neoris.websockets.filetransfer.JsonEncoder;
import com.neoris.websockets.filetransfer.ListFiles;
import com.neoris.websockets.filetransfer.Operation;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import javax.websocket.EncodeException;
import javax.websocket.OnClose;
import javax.websocket.OnError;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

/**
 *
 * @author marco.slehiman
 */
@ServerEndpoint(value = "/websocket/fileTransfer", encoders = { JsonEncoder.class }, decoders = { JsonDecoder.class })
public class FileTransferService {

	private int bufferSize = 1048576;

	private Session session;
	private File fileUploaded;
	private long size;
	private long length = 0;
	private File storage;

	@OnOpen
	public void open(Session session) {
		System.out.println("Session Open " + session.getId());
		File dir = new File("D:\\uploads");
		if (!dir.exists()) {
			dir.mkdir();
		}
		this.session = session;
		this.storage = dir;
	}

	@OnClose
	public void close(Session session) {
		System.out.println("On Close " + session.getId());
	}

	@OnError
	public void onError(Throwable error) {
		System.out.println("On Error: " + error.getMessage());
		error.printStackTrace();
	}

	@OnMessage
	public void processOperation(Operation operation) {
		System.out.println("On Message processOperation" + operation.toString());
		System.out.flush();
		switch (operation.getOperation()) {
		case ("put"):
			putFile(operation);
			break;
		case ("list"):
			listFiles();
			break;
		default:
			break;
		}
	}

	private void listFiles() {
		System.out.println("listFiles");
		System.out.flush();
		ListFiles storageFiles = new ListFiles();
		for (File entry : storage.listFiles()) {
			if (!entry.isDirectory()) {
				storageFiles.addFile(entry.getName(), entry.length());
			}
		}
		try {
			session.getBasicRemote().sendObject(storageFiles);
		} catch (IOException | EncodeException e) {
			e.printStackTrace();
		}
	}

	private void putFile(Operation operation) {
		System.out.println("putFile >>>>>>> " + operation.getFileName() + operation.getFileSize());
		System.out.flush();
		fileUploaded = new File(storage, operation.getFileName());
		;
		this.size = operation.getFileSize();
		this.length = 0;
	}

	@OnMessage
	public void processBinaryStream(InputStream is) {
		System.out.println("processBinaryStream");
		System.out.flush();
		byte[] buffer = new byte[this.bufferSize];

		try (FileOutputStream fos = new FileOutputStream(fileUploaded, true)) {
			while (is.available() > 0) {
				int bytesReaded = is.read(buffer);
				System.out.println("bytesReaded >> " + bytesReaded);
				fos.write(buffer, 0, bytesReaded);
				this.length += bytesReaded;
			}
			System.out.println("Longitud >> " + this.length);
			fos.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

}
